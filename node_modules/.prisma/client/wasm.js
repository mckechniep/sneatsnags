
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  role: 'role',
  isEmailVerified: 'isEmailVerified',
  emailVerifyToken: 'emailVerifyToken',
  resetPasswordToken: 'resetPasswordToken',
  resetPasswordExpires: 'resetPasswordExpires',
  stripeCustomerId: 'stripeCustomerId',
  stripeAccountId: 'stripeAccountId',
  profileImage: 'profileImage',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  venue: 'venue',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  eventDate: 'eventDate',
  doors: 'doors',
  eventType: 'eventType',
  category: 'category',
  subcategory: 'subcategory',
  ticketmasterId: 'ticketmasterId',
  imageUrl: 'imageUrl',
  minPrice: 'minPrice',
  maxPrice: 'maxPrice',
  totalSeats: 'totalSeats',
  availableSeats: 'availableSeats',
  status: 'status',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SectionScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  name: 'name',
  description: 'description',
  rowCount: 'rowCount',
  seatCount: 'seatCount',
  priceLevel: 'priceLevel'
};

exports.Prisma.OfferScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  eventId: 'eventId',
  maxPrice: 'maxPrice',
  quantity: 'quantity',
  message: 'message',
  status: 'status',
  expiresAt: 'expiresAt',
  acceptedAt: 'acceptedAt',
  acceptedBy: 'acceptedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OfferSectionScalarFieldEnum = {
  id: 'id',
  offerId: 'offerId',
  sectionId: 'sectionId'
};

exports.Prisma.ListingScalarFieldEnum = {
  id: 'id',
  sellerId: 'sellerId',
  eventId: 'eventId',
  sectionId: 'sectionId',
  row: 'row',
  seats: 'seats',
  price: 'price',
  quantity: 'quantity',
  notes: 'notes',
  status: 'status',
  sourceType: 'sourceType',
  externalId: 'externalId',
  syncMetadata: 'syncMetadata',
  lastExternalUpdate: 'lastExternalUpdate',
  syncStatus: 'syncStatus',
  ticketFiles: 'ticketFiles',
  isVerified: 'isVerified',
  verifiedAt: 'verifiedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  sellerId: 'sellerId',
  offerId: 'offerId',
  listingId: 'listingId',
  eventId: 'eventId',
  amount: 'amount',
  platformFee: 'platformFee',
  sellerAmount: 'sellerAmount',
  stripePaymentIntent: 'stripePaymentIntent',
  stripeTransferId: 'stripeTransferId',
  status: 'status',
  ticketsDelivered: 'ticketsDelivered',
  ticketsDeliveredAt: 'ticketsDeliveredAt',
  refundAmount: 'refundAmount',
  refundedAt: 'refundedAt',
  disputeReason: 'disputeReason',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BrokerIntegrationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  integrationType: 'integrationType',
  name: 'name',
  credentials: 'credentials',
  syncSchedule: 'syncSchedule',
  isActive: 'isActive',
  lastSyncAt: 'lastSyncAt',
  lastSyncStatus: 'lastSyncStatus',
  errorCount: 'errorCount',
  maxErrors: 'maxErrors',
  fieldMappings: 'fieldMappings',
  syncPreferences: 'syncPreferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BrokerSyncLogScalarFieldEnum = {
  id: 'id',
  brokerIntegrationId: 'brokerIntegrationId',
  syncType: 'syncType',
  status: 'status',
  recordsProcessed: 'recordsProcessed',
  recordsSucceeded: 'recordsSucceeded',
  recordsFailed: 'recordsFailed',
  errorMessages: 'errorMessages',
  processingTimeMs: 'processingTimeMs',
  startedAt: 'startedAt',
  completedAt: 'completedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  isRead: 'isRead',
  readAt: 'readAt',
  createdAt: 'createdAt'
};

exports.Prisma.SupportTicketScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  subject: 'subject',
  message: 'message',
  status: 'status',
  priority: 'priority',
  category: 'category',
  assignedTo: 'assignedTo',
  resolvedAt: 'resolvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  BUYER: 'BUYER',
  SELLER: 'SELLER',
  BROKER: 'BROKER',
  ADMIN: 'ADMIN'
};

exports.EventType = exports.$Enums.EventType = {
  SPORTS: 'SPORTS',
  CONCERT: 'CONCERT',
  THEATER: 'THEATER',
  COMEDY: 'COMEDY',
  OTHER: 'OTHER'
};

exports.EventStatus = exports.$Enums.EventStatus = {
  ACTIVE: 'ACTIVE',
  CANCELLED: 'CANCELLED',
  POSTPONED: 'POSTPONED',
  COMPLETED: 'COMPLETED'
};

exports.OfferStatus = exports.$Enums.OfferStatus = {
  ACTIVE: 'ACTIVE',
  ACCEPTED: 'ACCEPTED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED'
};

exports.ListingStatus = exports.$Enums.ListingStatus = {
  AVAILABLE: 'AVAILABLE',
  SOLD: 'SOLD',
  RESERVED: 'RESERVED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED'
};

exports.SourceType = exports.$Enums.SourceType = {
  MANUAL: 'MANUAL',
  SKYBOX: 'SKYBOX',
  AUTOPROCESSOR: 'AUTOPROCESSOR',
  TICKETMASTER: 'TICKETMASTER'
};

exports.SyncStatus = exports.$Enums.SyncStatus = {
  PENDING: 'PENDING',
  SYNCING: 'SYNCING',
  SYNCED: 'SYNCED',
  FAILED: 'FAILED',
  CONFLICT: 'CONFLICT'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  DISPUTED: 'DISPUTED'
};

exports.IntegrationType = exports.$Enums.IntegrationType = {
  SKYBOX: 'SKYBOX',
  AUTOPROCESSOR: 'AUTOPROCESSOR',
  TICKET_EVOLUTION: 'TICKET_EVOLUTION',
  CUSTOM_FTP: 'CUSTOM_FTP'
};

exports.SyncType = exports.$Enums.SyncType = {
  FULL: 'FULL',
  INCREMENTAL: 'INCREMENTAL',
  MANUAL: 'MANUAL'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  OFFER_ACCEPTED: 'OFFER_ACCEPTED',
  OFFER_EXPIRED: 'OFFER_EXPIRED',
  PAYMENT_RECEIVED: 'PAYMENT_RECEIVED',
  TICKET_DELIVERED: 'TICKET_DELIVERED',
  SYSTEM_ALERT: 'SYSTEM_ALERT'
};

exports.TicketStatus = exports.$Enums.TicketStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

exports.TicketPriority = exports.$Enums.TicketPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Event: 'Event',
  Section: 'Section',
  Offer: 'Offer',
  OfferSection: 'OfferSection',
  Listing: 'Listing',
  Transaction: 'Transaction',
  BrokerIntegration: 'BrokerIntegration',
  BrokerSyncLog: 'BrokerSyncLog',
  Notification: 'Notification',
  SupportTicket: 'SupportTicket'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
